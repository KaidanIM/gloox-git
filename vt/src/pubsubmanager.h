/*
  Copyright (c) 2006-2007 by Jakob Schroeter <js@camaya.net>
  This file is part of the gloox library. http://camaya.net/gloox

  This software is distributed under a license. The full license
  agreement can be found in the file LICENSE in this distribution.
  This software may not be copied, modified, sold or distributed
  other than expressed in the named license agreement.

  This software is distributed without any warranty.
*/

#ifndef PUBSUB_H__
#define PUBSUB_H__

#include <map>
#include <string>
#include "iqhandler.h"

namespace gloox
{

  /**
   * Describes the different access types.
   */
  enum AccessType {
    AccessOpen,      /**< Any entity may subscribe to the node (i.e., without the necessity for subscription
                      *   approval) and any entity may retrieve items from the node (i.e., without being
                      *   subscribed); this SHOULD be the default access model for generic pubsub services. */
    AccessPresence,  /**< Any entity with a subscription of type "from" or "both" may subscribe to the node
                      *   and retrieve items from the node; this access model applies mainly to instant
                      *   messaging systems (see RFC 3921). */
    AccessRoster,    /**< Any entity in the specified roster group(s) may subscribe to the node and retrieve
                      *   items from the node; this access model applies mainly to instant messaging systems
                      *   (see RFC 3921). */
    AccessAuthorize, /**< The node owner must approve all subscription requests, and only subscribers may
                      *   retrieve items from the node. */
    AccessWhitelist  /**< An entity may be subscribed only through being added to a whitelist by the node
                      *   owner (unsolicited subscription requests are rejected), and only subscribers may
                      *   retrieve items from the node. In effect, the default affiliation is outcast. The
                      *   node owner MUST automatically be on the whitelist. In order to add entities to the
                      *   whitelist, the node owner SHOULD use the protocol specified in the Manage Affiliated
                      *   Entities section of this document. */
  };

  /**
   * Describes the different possible errors related to subscription options.
   */
  enum OptionRequestError {
    OptionRequestErrorNone,       /**< No error */
    OptionRequestUnprivileged,    /**< The requesting entity does not have sufficient privileges to
                                   *   modify subscription options for the specified JID. */
    OptionRequestUnsubscribed,    /**< The requesting entity (or specified subscriber) is not subscribed. */
    OptionRequestNodeAndJID,      /**< The request does not specify both the NodeID and the subscriber's JID. */
    OptionRequestMissingSID,      /**< The request does not specify a subscription ID but one is required. */
    OptionRequestInvalidSID,      /**< The request specifies a subscription ID that is not valid or current. */
    OptionRequestUnsupported,     /**< Subscription options are not supported. */
    OptionRequestItemNotFound     /**< The node does not exist. */
  };

// [Persistent - Notification]
/**< Publisher MUST include an <item/> element, which MAY be empty or contain a payload; if item ID is not provided by publisher, it MUST be generated by pubsub service */

// [Persistent - Payload]
/**< Publisher MUST include an <item/> element that contains the payload; if item ID is not provided by publisher, it MUST be generated by pubsub service */

// [Transient - Notification]
/**< Publisher MUST NOT include an <item/> element (therefore item ID is neither provided nor generated) but the notification will include an empty <items/> element */

// [Transient - Payload]
/**< Publisher MUST include an <item/> element that contains the payload, but the item ID is OPTIONAL */


  class ClientBase;
  class DataForm;
  class PSSubscriptionHandler;
  class PSSubscriptionListHandler;
  class PSAffiliationListHandler;


  /**
   * \bug No 'from' field to iq (use m_parent->BareJID() ?),
   *      same for the jid field of the subscription tag in subscribe.
   * \bug Tracking...
   * \bug HandleOptions is incomplete
   * \bug conflicting AffiliationType w/ MUCXXX
   */
  class PubSubManager : public IqHandler
  {
    public:


      class Node;
      class Item;

      typedef std::list< Node * > NodeList;
      typedef std::list< Item * > ItemList;

      //typedef std::map< JID, NodeList > ServiceMap;
      //typedef std::map< std::string, AffiliationType > NodeMap;

      struct Item
      {
        public:
          Item( const std::string& _id )
            : id( _id )
          {}
          std::string id;
          
          
      };

      struct Node
      {
        public:
          /**
           * Describes the different node types.
           */
          enum NodeType {
            NodeInvalid,     /**< Invalid node type */
            NodeLeaf,        /**< A node that contains published items only. It is NOT a container for other nodes. */
            NodeCollection   /**< A node that contains nodes and/or other collections but no published items.
                              *   Collections make it possible to represent hierarchial node structures. */
          };

          /**
           * Constructs a Node from a type, a JID (XEP-0060 Sect 4.6.1) and a name.
           */
          Node( NodeType _type, const std::string& _jid, const std::string& _name )
            : type( _type ), jid( _jid ), name( _name) {}

          /**
           * Constructs a Node from a type, a JID+NodeID (XEP-0060 Sect 4.6.2) and a name.
           */
          Node( NodeType _type, const std::string& _jid,
                                const std::string& _node,
                                const std::string& _name )
            : type( _type ), jid( _jid ), name( _name) { jid.setResource( _node ); }

          NodeType type;
          JID jid;
          std::string name;
          /*
          union {
            ItemList items;
            NodeList nodes;
          };
          */
      };

      struct LeafNode : public Node
      {
        LeafNode( const std::string& _service, const std::string& _name )
          : Node( NodeLeaf, _service, _name )
        {}
        ItemList m_itemList;
      };

      struct CollectionNode : public Node
      {
        CollectionNode( const std::string& _service, const std::string& _name )
          : Node( NodeCollection, _service, _name )
        {}
        NodeList m_nodeList;
      };

      /**
       * Initialize the manager.
       */
      PubSubManager( ClientBase* parent ) : m_parent(parent) {}

      /**
       * Virtual Destructor.
       */
      virtual ~PubSubManager() {}

      /**
       * 
       */
      void subscribe( const std::string& jid, const std::string& node );

      /**
       * 
       */
      void unsubscribe( const std::string& jid, const std::string& node );

      /**
       * Requests the subscription list from a service.
       * @param jid Service to query.
       */
      void requestSubscriptionList( const std::string& jid, PSSubscriptionListHandler * slh  );

      /**
       * Requests the affiliation list from a service.
       * @param jid Service to query.
       */
      void requestAffiliationList( const std::string& jid, PSAffiliationListHandler * alh );

      /**
       * 
       */
      void requestOptions( const std::string& jid, const std::string& node );

      /**
       * 
       */
      virtual void handleOptions( const JID& jid,
                                  const std::string& node,
                                  const DataForm& dataForm,
                                  const OptionRequestError e ) = 0;

      bool handleIq (Stanza *stanza);

      bool handleIqID (Stanza *stanza, int context);

      //NodeMap m_nodeMap;
      //ServiceMap m_service_list;

    private:
      typedef std::map<std::string, PSSubscriptionHandler * > SubscriptionTrackMap;
      typedef std::map<std::string, PSAffiliationListHandler * > AffiliationListTrackMap;
      typedef std::map<std::string, PSSubscriptionListHandler * > SubscriptionListTrackMap;
      ClientBase* m_parent;
      SubscriptionTrackMap m_subscriptionTrackMap;
      AffiliationListTrackMap m_affListTrackMap;
      SubscriptionListTrackMap m_subListtrackMap;
  };

}

#endif /* PUBSUB_H__ */
